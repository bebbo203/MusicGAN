from math import log
import torch


### DATASET PARAMETERS ###
GENRES = ["id_list_favorites.txt"]              # List of generes from the last_fm folder
BEAT_RESOLUTION = 4                             # The shortest note can be a quarter long
MEASURE_LENGTH = 4 * BEAT_RESOLUTION            # Using 4/4 songs
LOWEST_PITCH = 24                               # Lowest pitch (among the 128 ones) considered
N_PITCHES = 72                                  # Number of pitches (among the 128 ones) considered
N_MEASURES_FOR_SAMPLE = 4                       # How many measures (i.e. BATTUTE in italian) for each sample
N_SAMPLES_PER_SONG = 8                          # Number of samples taken for each song
N_TRACKS = 5                                    # Number of instruments
PROGRAMS = [0, 0, 25, 33, 48]                   # MIDI programs (instrument): used when generating a .MID file
assert len(PROGRAMS) == N_TRACKS
IS_DRUMS = [True, False, False, False, False]   # Whether are percussion instruments
assert len(IS_DRUMS) == N_TRACKS
TRACK_NAMES = ['Drums', 'Piano', 'Guitar', 'Bass', 'Strings']
assert len(TRACK_NAMES) == N_TRACKS
TEMPO = 100                                     # Speed of the song whe reproduced


### TRAINING PARAMETERS ###
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
LATENT_DIM = 128                                # Input noise dimension
LR = 0.005                                      # Learning rate
GAMMA = 10.0                                    # Gamma factor of gradient penalty
BATCH_SIZE = 64 // N_SAMPLES_PER_SONG           # The batch size is at most the number written here
MAX_EPOCHS = 1000
LOG_INTERVAL = 10                               # How many steps before saving a pianoroll image to IMG_SAVE_PATH
# generator_update_interval = lambda epoch_idx: int(max(10./log(epoch_idx + 1.), 1.))
GENERATOR_UPDATE_INTERVAL = 5
TEST = False                                    # True to test the scripts

GENERATED_PATH = "test.mid"                     # MIDI file path generated by the midi_generator.py script


### CHECKPOINT PATHS ###
COLAB_TRAINING = False                                              

CHECKPOINT_PATH = "checkpoints/checkpoint_" if not COLAB_TRAINING else "../drive/My Drive/MusicGAN/checkpoints/checkpoint_"
WRITER_PATH = "" if not COLAB_TRAINING else "../drive/My Drive/MusicGAN/runs/long_run"
IMG_SAVE_PATH = "imgs" if not COLAB_TRAINING else "../drive/My Drive/MusicGAN/imgs"

